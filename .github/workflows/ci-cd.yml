name: CI/CD Pipeline - Adversarial Comparator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Test Job - Runs on multiple Python versions
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
        include:
          - python-version: 3.8
            torch-version: "2.0.0"
          - python-version: 3.9
            torch-version: "2.1.0"
          - python-version: 3.10
            torch-version: "2.2.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ matrix.torch-version }} torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy bandit
    
    - name: Run linting with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run code formatting check with black
      run: |
        black --check --diff src/
    
    - name: Run import sorting check with isort
      run: |
        isort --check-only --diff src/
    
    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run security scanning with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt -o bandit-report.txt || true
    
    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          bandit-report.txt

  # Security Job - Additional security checks
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install safety pip-audit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # Build and Deploy Job
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r src/ deployment/
        cp app.py deployment/
        cp requirements.txt deployment/
        cp README.md deployment/
        cp QUICKSTART.md deployment/
        cp DISCLAIMER.md deployment/
        cp LICENSE.md deployment/
        cp -r docs/ deployment/
        tar -czf adversarial-comparator-v1.0.tar.gz -C deployment .
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: adversarial-comparator-v1.0.tar.gz
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: adversarial-comparator-v1.0.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Documentation Job
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README links
      run: |
        # Basic link checking (can be enhanced with linkchecker tool)
        echo "Checking for broken links in documentation..."
        grep -r "http" docs/ README.md QUICKSTART.md || true
    
    - name: Validate markdown
      run: |
        # Install markdown lint tool
        npm install -g markdownlint-cli
        markdownlint README.md docs/*.md QUICKSTART.md DISCLAIMER.md LICENSE.md || true
    
    - name: Check documentation completeness
      run: |
        echo "Checking documentation files..."
        required_files=("README.md" "QUICKSTART.md" "DISCLAIMER.md" "LICENSE.md")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

  # Performance Test Job
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
    
    - name: Run performance tests
      run: |
        echo "Running basic performance checks..."
        python -c "
        import time
        import psutil
        import sys
        sys.path.append('src')
        
        # Test model loading time
        start_time = time.time()
        try:
            from models.model_factory import ModelFactory
            factory = ModelFactory()
            model = factory.create_model('resnet18')
            load_time = time.time() - start_time
            print(f'Model loading time: {load_time:.2f}s')
            if load_time > 10:
                print('⚠️ Model loading is slow (>10s)')
            else:
                print('✅ Model loading time is acceptable')
        except Exception as e:
            print(f'❌ Model loading failed: {e}')
        
        # Check memory usage
        process = psutil.Process()
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f'Memory usage: {memory_mb:.1f}MB')
        if memory_mb > 2048:
            print('⚠️ High memory usage (>2GB)')
        else:
            print('✅ Memory usage is acceptable')
        " 